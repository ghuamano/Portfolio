---
import LanguageSelector from "./LanguageSelector.astro";
import { getContent } from "../utils/translations";
// Obtenemos el idioma actual usando la funci√≥n nativa de Astro
const currentLocale = Astro.currentLocale || "es";
const content = getContent(currentLocale);
import ThemeToggle from "./ThemeToggle.astro";

const navItems = [
    {
        title: content.nav.projects,
        label: content.nav.projects,
        url: "/#projects",
    },
    {
        title: content.nav.experience,
        label: content.nav.experience,
        url: "/#experience",
    },

    {
        title: content.nav.about,
        label: content.nav.about,
        url: "/#about-me",
    },
    {
        title: content.nav.contact,
        label: content.nav.contact,
        url: "mailto:g.huaman.o@gmail.com",
    },
];
---

<header
    class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2 px-2"
>
    <nav
        class="flex flex-col md:flex-row px-3 md:px-4 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 items-center w-full md:max-w-xl lg:max-w-2xl"
    >
        <div
            class="flex flex-nowrap justify-center w-full md:justify-start overflow-x-auto px-1 py-1 mx-auto md:mx-0"
        >
            {
                navItems.map((link) => (
                    <a
                        class="relative px-3 md:px-2 py-2 whitespace-nowrap transition hover:text-blue-500 dark:hover:text-blue-500"
                        aria-label={link.label}
                        href={link.url}
                    >
                        {link.title}
                    </a>
                ))
            }
        </div>

        <div class="flex items-center space-x-2 mt-1 md:mt-0 mx-auto md:mx-0">
            <div class="flex-shrink-0">
                <ThemeToggle />
            </div>

            <div class="flex-shrink-0">
                <LanguageSelector />
            </div>
        </div>
    </nav>
</header>

<script>
    document.addEventListener("astro:page-load", () => {
        const sections = document.querySelectorAll("section");
        const navItems = document.querySelectorAll("header nav a");

        const callback = (entries: any[]) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    navItems.forEach((item) => {
                        if (
                            item.getAttribute("aria-label") == entry.target.id
                        ) {
                            item.classList.add("text-blue-500");
                        } else {
                            item.classList.remove("text-blue-500");
                        }
                    });
                }
            });
        };

        const observer = new IntersectionObserver(callback, {
            root: null,
            rootMargin: "0px",
            threshold: 0.3,
        });

        sections.forEach((section) => {
            observer.observe(section);
        });

        // Cleanup function
        document.onvisibilitychange = () => {
            if (document.visibilityState === "hidden") {
                observer.disconnect();
            } else {
                sections.forEach((section) => {
                    observer.observe(section);
                });
            }
        };
    });
</script>

<style>
    nav {
        animation: nav-shadown 1s linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    nav {
        @apply dark:bg-gray-800/90 bg-white/50;
    }

    @keyframes nav-shadown {
        0% {
            @apply dark:bg-gray-800/0 bg-white/0;
        }
        to {
            @apply shadow-lg ring-1 backdrop-blur ring-white/10;
        }
    }
</style>
