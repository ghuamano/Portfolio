---
import WorldIcon from "./Icons/World.astro";
// Obtenemos la URL actual y el idioma actual
const currentLocale = Astro.currentLocale || "es";

// FunciÃ³n para generar URLs traducidas
function getLocalizedPath(targetLocale: string): string {
    // Si es el idioma predeterminado, vamos a la raÃ­z
    if (targetLocale === "es") {
        return "/";
    }

    // Para otros idiomas, aÃ±adimos el prefijo
    return `/${targetLocale}/`;
}
---

<div class="relative inline-block text-left justify-self-end ps-0">
    <div>
        <button
        transition:persist
            type="button"
            class="dropdown-button inline-flex w-full justify-center gap-x-1.5  ps-10 pe-0 py-2 text-sm font-semibold align-bottom  "
            id="menu-button"
            aria-expanded="true"
            aria-haspopup="true"
        > <WorldIcon/>
            
        </button>
        <div
        transition:persist
            class="dropdown-content absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md "
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="menu-button"
            tabindex="-1"
        >
            <div class="py-1" role="none">
                <a
                    href={getLocalizedPath("es")}
                    class={currentLocale === "es" ? "active" : "px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm"}
                >
                    ðŸ‡ªðŸ‡¸ ES
                </a>
                <a
                    href={getLocalizedPath("en")}
                    class={currentLocale === "en" ? "active" : ""}
                >
                    ðŸ‡¬ðŸ‡§ EN
                </a>
                <a
                    href={getLocalizedPath("it")}
                    class={currentLocale === "it" ? "active" : ""}
                >
                    ðŸ‡®ðŸ‡¹ IT
                </a>
            
            </div>
        </div>
    </div>

    <script is:inline>
        // Execute immediately without waiting for DOMContentLoaded
        // This ensures it works after navigation/language changes
        const setupDropdown = () => {
            const dropdownButton = document.querySelector(".dropdown-button");
            const dropdownContent = document.querySelector(".dropdown-content");

            if (dropdownButton && dropdownContent) {
                // Remove existing event listeners if any
                const newButton = dropdownButton.cloneNode(true);
                dropdownButton.parentNode.replaceChild(newButton, dropdownButton);
                
                // Add event listeners
                newButton.addEventListener("click", (e) => {
                    e.stopPropagation();
                    dropdownContent.classList.toggle("show");
                });

                document.addEventListener("click", (event) => {
                    if (
                        event.target instanceof Element &&
                        !event.target.matches(".dropdown-button")
                    ) {
                        dropdownContent.classList.remove("show");
                    }
                });
            }
        };

        // Run setup immediately and after any dynamic navigation
        setupDropdown();
        document.addEventListener("astro:page-load", setupDropdown);
    </script>

    <style>
        .language-switcher {
            display: flex;
            gap: 1rem;
        }
        .language-switcher a {
            padding: 0.1rem 0.6rem;
            border-radius: 0.25rem;
            text-decoration: none;
        }
        .language-switcher a.active {
            font-weight: bold;
            background-color: rgba(255, 255, 255, 0.078);
        }
        
        /* Hide dropdown by default */
        .dropdown-content {
            display: none;
        }
        
        /* Show dropdown when active */
        .dropdown-content.show {
            display: block;
        }
        
        /* Style the links in dropdown */
        .dropdown-content a {
            display: block;
            padding: 0.3rem 1rem;
            
        }
        
        .dropdown-content a:hover {
            background-color: #a1a1a15f;
            
        }
    </style>
</div>
